# Generated by Selenium IDE
import pytest
import time
import json
import unittest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestRegister(unittest.TestCase):

  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
    self.url = "https://www.testingandplay.com/example/form"

  def teardown_method(self, method):
    self.driver.quit()

  def init_method(self, method):
    self.driver.get(self.url)
    self.driver.set_window_size(1346, 708)

  def check_message_alert(self, message, class_status):
    self.driver.implicitly_wait(1000)
    text_alert = self.driver.find_element_by_xpath("//ngb-alert[@class='alert " + class_status + " alert-dismissible']").text
    self.assertIn(message, text_alert)

  def click_button_send(self):
    self.driver.find_element(By.XPATH, "//button[@id=\'submit-input\']").click()

  def set_password(self, password):
    input_password = self.driver.find_element(By.XPATH, "//input[@name=\'password\']")
    input_password.send_keys(password)

  def set_email(self, email):
    input_email = self.driver.find_element(By.XPATH, "//input[@name=\'email\']")
    input_email.send_keys(email)

  def check_text_label_invalid(self, message):
    label_invalid = self.driver.find_element_by_xpath("//div[@class='invalid-feedback']").text
    self.assertIn(message, label_invalid)

  def set_autocomplete(self):
    autocomplete = self.driver.find_element(By.XPATH, "//input[@id=\'typeahead-basic\']")
    autocomplete.send_keys("District Of Columbia")
    self.driver.implicitly_wait(2000)
    option = self.driver.find_element(By.XPATH, "//button[@id=\'ngb-typeahead-0-0\']")
    option.click()

  def set_dropdown(self):
    dropdown = self.driver.find_element(By.ID, "select-input")
    dropdown.find_element(By.XPATH, "//option[. = '2']").click()

  def set_textarea(self):
    textarea = self.driver.find_element(By.XPATH, "//textarea[@id=\'textarea-input\']")
    textarea.send_keys("Hello")

  def set_file(self):
    file_input = self.driver.find_element(By.XPATH, "//input[@type='file']")
    file_input.send_keys("C:\\Users\\Rafael Alves\\Downloads\\file.txt")

  def set_radio(self):
    self.driver.find_element(By.XPATH, "//label[contains(.,\'Radio 2\')]").click()

  def set_checkbox(self):
    self.driver.find_element(By.XPATH, "//label[contains(.,\'Check\')]").click()

  def test_register_no_required_field(self):
    self.init_method(self)
    self.click_button_send()
    self.check_message_alert("Formulário inválido", "alert-danger")

  def test_register_email_incorrect_format(self):
    self.init_method(self)
    self.set_email("rafael.alves@mail")
    self.set_password("123456")
    self.click_button_send()
    self.check_message_alert("Formulário inválido", "alert-danger")
    self.check_text_label_invalid("Email inválido")

  def test_register_incorrect_password(self):
    self.init_method(self)
    self.set_password("123")
    self.click_button_send()
    self.check_message_alert("Formulário inválido", "alert-danger")
    self.check_text_label_invalid("Senha deve ter entre 4 e 8 caracteres.")

  def test_register_success(self):
    self.init_method(self)
    self.set_email("rafael.alves@mail.com")
    self.set_autocomplete()
    self.set_dropdown()
    self.set_textarea()
    self.set_file()
    self.set_password("123456")
    self.set_radio()
    self.set_checkbox()
    self.click_button_send()
    self.check_message_alert("Sucesso", "alert-success")

if __name__ == '__main__':
    unittest.main()
